{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/qunzhiwwang/Documents/GitHub/React-BurgerBuilder/src/components/Burger/Burger.js\";\nimport React from 'react';\nimport BurgerIngredients from './BurgerIngredients/BurgerIngredients';\nimport classes from '../Burger/Burger.module.css';\n\nconst burger = props => {\n  // convert state object (ingridients) to an array;\n  const transformedIngredietns = Object.keys(props.ingredients).map(igKey => {\n    // underscore sign _ used in map method represents an unused param\n    return [...Array(props.ingredients[igKey])].map((_, i) => {\n      return /*#__PURE__*/_jsxDEV(BurgerIngredients, {\n        type: igKey\n      }, igKey + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 24\n      }, this);\n    });\n  }).reduce((arr, el) => {\n    return arr.concat(el);\n  }, []); // reduce function take the accumulator (arr) and concate it with current value (el) \n  // given initial value provided (empty array in this case)\n  // therefore arr is [], and it concat with first elemt el in the array\n  // in first round\n\n  console.log(transformedIngredietns);\n\n  if (transformedIngredietns.length === 0) {\n    transformedIngredietns = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Please start adding ingredients!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 34\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.Burger,\n    children: [/*#__PURE__*/_jsxDEV(BurgerIngredients, {\n      type: \"bread-top\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), transformedIngredietns, /*#__PURE__*/_jsxDEV(BurgerIngredients, {\n      type: \"bread-bottom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\nexport default burger;","map":{"version":3,"sources":["/Users/qunzhiwwang/Documents/GitHub/React-BurgerBuilder/src/components/Burger/Burger.js"],"names":["React","BurgerIngredients","classes","burger","props","transformedIngredietns","Object","keys","ingredients","map","igKey","Array","_","i","reduce","arr","el","concat","console","log","length","Burger"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,uCAA9B;AACA,OAAOC,OAAP,MAAoB,6BAApB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACvB;AACC,QAAMC,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EAC1BC,GAD0B,CACrBC,KAAK,IAAI;AACX;AACA,WAAO,CAAC,GAAGC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,KAAlB,CAAD,CAAT,EAAqCD,GAArC,CAAyC,CAACG,CAAD,EAAIC,CAAJ,KAAU;AACtD,0BAAO,QAAC,iBAAD;AAAmC,QAAA,IAAI,EAAIH;AAA3C,SAAwBA,KAAK,GAAGG,CAAhC;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFM,CAAP;AAGH,GAN0B,EAO1BC,MAP0B,CAOnB,CAACC,GAAD,EAAMC,EAAN,KAAa;AACjB,WAAOD,GAAG,CAACE,MAAJ,CAAWD,EAAX,CAAP;AACH,GAT0B,EASxB,EATwB,CAA/B,CAFsB,CAYlB;AACA;AACA;AACA;;AACJE,EAAAA,OAAO,CAACC,GAAR,CAAYd,sBAAZ;;AAEA,MAAGA,sBAAsB,CAACe,MAAvB,KAAkC,CAArC,EAAwC;AACpCf,IAAAA,sBAAsB,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAzB;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAEH,OAAO,CAACmB,MAAxB;AAAA,4BACI,QAAC,iBAAD;AAAmB,MAAA,IAAI,EAAG;AAA1B;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKhB,sBAFL,eAGI,QAAC,iBAAD;AAAmB,MAAA,IAAI,EAAG;AAA1B;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA5BD;;AA8BA,eAAeF,MAAf","sourcesContent":["import React from 'react';\nimport BurgerIngredients from './BurgerIngredients/BurgerIngredients';\nimport classes from '../Burger/Burger.module.css';\n\nconst burger = (props) => {\n   // convert state object (ingridients) to an array;\n    const transformedIngredietns = Object.keys(props.ingredients)\n        .map( igKey => {\n            // underscore sign _ used in map method represents an unused param\n            return [...Array(props.ingredients[igKey])].map((_, i) => {\n                return <BurgerIngredients key={igKey + i} type = {igKey} />\n            });\n        })\n        .reduce((arr, el) => {    \n            return arr.concat(el)\n        }, []);\n        // reduce function take the accumulator (arr) and concate it with current value (el) \n        // given initial value provided (empty array in this case)\n        // therefore arr is [], and it concat with first elemt el in the array\n        // in first round\n    console.log(transformedIngredietns);\n\n    if(transformedIngredietns.length === 0) {\n        transformedIngredietns = <p> Please start adding ingredients!</p>\n    }\n    return (\n        <div className={classes.Burger}>\n            <BurgerIngredients type = \"bread-top\" />\n            {transformedIngredietns}\n            <BurgerIngredients type = \"bread-bottom\" />\n        </div>\n    );\n};\n\nexport default burger;"]},"metadata":{},"sourceType":"module"}