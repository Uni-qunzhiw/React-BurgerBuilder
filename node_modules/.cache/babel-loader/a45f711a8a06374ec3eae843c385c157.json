{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/qunzhiwwang/Documents/GitHub/React-BurgerBuilder/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Aux from \"../../hoc/Aux\";\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nconst INGRREDIENT_PRICE = {\n  salad: 1,\n  cheese: 1,\n  meat: 3,\n  bacon: 2\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: null,\n      totalPrice: 4,\n      purchasable: false,\n      purchasing: false,\n      loading: false,\n      error: null\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCounted = oldCount + 1; // update in immutable way;\n\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCounted;\n      const priceAddition = INGRREDIENT_PRICE[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCounted = oldCount - 1; // update in immutable way;\n\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCounted;\n      const priceDeduction = INGRREDIENT_PRICE[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.purchaseCancleHandler = () => this.setState({\n      purchasing: false\n    });\n\n    this.purchaseContinueHandler = () => {\n      // alert('You continue!');\n      // this.setState( { loading: true } );\n      // const order = {\n      //     ingredients: this.state.ingredients,\n      //     price: this.state.totalPrice,\n      //     customer: {\n      //         name: 'Max SchwarzmÃ¼ller',\n      //         address: {\n      //             street: 'Teststreet 1',\n      //             zipCode: '41351',\n      //             country: 'Germany'\n      //         },\n      //         email: 'test@test.com'\n      //     },\n      //     deliveryMethod: 'fastest'\n      // }\n      // axios.post( '/orders.json', order )\n      //     .then( response => {\n      //         this.setState( { loading: false, purchasing: false } );\n      //     } )\n      //     .catch( error => {\n      //         this.setState( { loading: false, purchasing: false } );\n      //     } );\n      const query = [];\n\n      for (let i in this.state.ingredients) {\n        query.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));\n      }\n\n      this.props.history.push({\n        pathname: '/checkout',\n        search: ''\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    axios.get(\"https://react-my-burger-e0c74-default-rtdb.firebaseio.com/ingredients.json\").then(response => {\n      this.setState({\n        ingredients: response.data\n      });\n    }).catch(error => {\n      // console.log(error);\n      this.setState({\n        error: true\n      });\n    });\n  } // if not using arrow function, cannot use \"this\"\n\n\n  // have to receive updated ingredients otherwise we might not be able to access\n  // to updated ingredients when setstate is called.\n  updatePurchaseState(ingredients) {\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, cur) => {\n      return sum + cur;\n    }, 0);\n    this.setState({\n      purchasable: sum > 0\n    });\n  }\n\n  render() {\n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    let orderSummary = null;\n    let burger = this.state.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Ingredient's cannot be loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 41\n    }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 80\n    }, this);\n\n    if (this.state.ingredients) {\n      burger = /*#__PURE__*/_jsxDEV(Aux, {\n        children: [/*#__PURE__*/_jsxDEV(Burger, {\n          ingredients: this.state.ingredients\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(BuildControls, {\n          ingredientAdded: this.addIngredientHandler,\n          ingredientDeleted: this.removeIngredientHandler,\n          disabled: disabledInfo,\n          purchasable: this.state.purchasable,\n          ordered: this.purchaseHandler,\n          price: this.state.totalPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this);\n      orderSummary = /*#__PURE__*/_jsxDEV(OrderSummary, {\n        summary: this.state.totalPrice.toFixed(2),\n        purchaseCanceled: this.purchaseCancleHandler,\n        purchaseContinue: this.purchaseContinueHandler,\n        ingredients: this.state.ingredients\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 28\n      }, this);\n    }\n\n    if (this.state.loading) {\n      orderSummary = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 28\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(Modal, {\n        show: this.state.purchasing,\n        modalClosed: this.purchaseCancleHandler,\n        children: orderSummary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), burger]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withErrorHandler(BurgerBuilder, axios);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/qunzhiwwang/Documents/GitHub/React-BurgerBuilder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Burger","BuildControls","Aux","Modal","OrderSummary","axios","Spinner","withErrorHandler","INGRREDIENT_PRICE","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","purchasing","loading","error","purchaseHandler","setState","addIngredientHandler","type","oldCount","updatedCounted","updatedIngredients","priceAddition","oldPrice","newPrice","updatePurchaseState","removeIngredientHandler","priceDeduction","purchaseCancleHandler","purchaseContinueHandler","query","i","push","encodeURIComponent","props","history","pathname","search","componentDidMount","console","log","get","then","response","data","catch","sum","Object","keys","map","igKey","reduce","cur","render","disabledInfo","key","orderSummary","burger","toFixed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Aux from \"../../hoc/Aux\";\nimport Modal from'../../components/UI/Modal/Modal';\nimport OrderSummary from  '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nconst INGRREDIENT_PRICE = {\n    salad: 1,\n    cheese: 1,\n    meat: 3,\n    bacon: 2\n}\n\nclass BurgerBuilder extends Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {...}\n    // }\n\n    state = {\n        ingredients: null,\n        totalPrice: 4,\n        purchasable : false,\n        purchasing: false,\n        loading: false,\n        error : null\n    };\n\n    componentDidMount() {\n        console.log(this.props);\n        axios.get(\"https://react-my-burger-e0c74-default-rtdb.firebaseio.com/ingredients.json\")\n            .then(response => {\n                this.setState({ingredients:response.data})\n            })\n            .catch(error => {\n                // console.log(error);\n                this.setState({error: true})\n            });\n    }\n    // if not using arrow function, cannot use \"this\"\n    purchaseHandler = () => {\n        this.setState({purchasing : true});\n    };\n\n    // have to receive updated ingredients otherwise we might not be able to access\n    // to updated ingredients when setstate is called.\n    updatePurchaseState (ingredients) {\n\n        const sum = Object.keys(ingredients)\n            .map(igKey => {\n                return ingredients[igKey];\n            })\n            .reduce((sum, cur) => {\n                return sum + cur; \n            }, 0);\n        this.setState({purchasable: sum > 0});\n    };\n\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        const updatedCounted = oldCount + 1;\n        // update in immutable way;\n        const updatedIngredients = {\n           ...this.state.ingredients \n        };\n        updatedIngredients[type] = updatedCounted;\n        const priceAddition = INGRREDIENT_PRICE[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients})\n        this.updatePurchaseState(updatedIngredients);\n    };\n\n\n\n    removeIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        if( oldCount <= 0) {\n            return;\n        }\n        const updatedCounted = oldCount - 1;\n        // update in immutable way;\n        const updatedIngredients = {\n           ...this.state.ingredients \n        };\n        updatedIngredients[type] = updatedCounted;\n        const priceDeduction = INGRREDIENT_PRICE[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceDeduction;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n        this.updatePurchaseState(updatedIngredients);\n    };\n\n    purchaseCancleHandler =  () => (\n        this.setState({purchasing: false})\n    )\n    purchaseContinueHandler = () => {\n        // alert('You continue!');\n        // this.setState( { loading: true } );\n        // const order = {\n        //     ingredients: this.state.ingredients,\n        //     price: this.state.totalPrice,\n        //     customer: {\n        //         name: 'Max SchwarzmÃ¼ller',\n        //         address: {\n        //             street: 'Teststreet 1',\n        //             zipCode: '41351',\n        //             country: 'Germany'\n        //         },\n        //         email: 'test@test.com'\n        //     },\n        //     deliveryMethod: 'fastest'\n        // }\n        // axios.post( '/orders.json', order )\n        //     .then( response => {\n        //         this.setState( { loading: false, purchasing: false } );\n        //     } )\n        //     .catch( error => {\n        //         this.setState( { loading: false, purchasing: false } );\n        //     } );\n        const query = [];\n        for (let i in this.state.ingredients) {\n            query.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));\n        }\n        this.props.history.push({\n            pathname: '/checkout',\n            search: ''\n        });\n    }\n\n    render () {\n        const disabledInfo = {\n            ...this.state.ingredients\n        };\n\n        for( let key in disabledInfo) {\n            disabledInfo[key] = disabledInfo[key] <= 0;\n        }\n        \n        let orderSummary = null;\n\n        let burger = this.state.error ? <p>Ingredient's cannot be loaded</p> : <Spinner />\n\n        if(this.state.ingredients) {\n            burger = (\n                <Aux>\n                    <Burger ingredients = {this.state.ingredients} />\n                    <BuildControls \n                        ingredientAdded = {this.addIngredientHandler}\n                        ingredientDeleted = {this.removeIngredientHandler}\n                        disabled={disabledInfo}\n                        purchasable = {this.state.purchasable}\n                        ordered = {this.purchaseHandler}\n                        price={this.state.totalPrice} />\n                </Aux>\n            );\n            orderSummary = <OrderSummary \n                summary = {this.state.totalPrice.toFixed(2)}\n                purchaseCanceled = {this.purchaseCancleHandler}\n                purchaseContinue = {this.purchaseContinueHandler}\n                ingredients = {this.state.ingredients} />;\n            \n        }\n        if(this.state.loading) {\n            orderSummary = <Spinner />\n        }\n\n\n        return (\n            <Aux>\n                <Modal \n                    show={this.state.purchasing} \n                    modalClosed = {this.purchaseCancleHandler}>\n                        {/* if spinner doesnt show, check modal.js */}\n                        {orderSummary}\n                </Modal>\n                {burger}\n            </Aux>\n        );\n    }\n}\n\nexport default withErrorHandler(BurgerBuilder, axios);\n"]},"metadata":{},"sourceType":"module"}